ORG 0
;mvi 8001, 01
;mvi 8002, 41

mvi a, 0
out fc
out fe
mvi l, 0
in f0
ani 0f
mov h, a
pchl

ORG 100
mvi a, 0
mvi b, 1
mvi h, 0a
LOOP:
add b
mov c, a
mov a, b
cmp h
jnc OVER1
mov a, c
inr b
JMP LOOP
OVER1:
mov a, c
out fe
hlt

ORG 200
mvi a, 77 ; 3e 77
out fc ; d3 fc
hlt

ORG 300
L3:
in f0
out fc
jmp L3
hlt

ORG 400
mvi b, 0
mvi c, 2
inx b
mov a, c
out fc
hlt

ORG 500
mvi b, 10
mvi c, 00
mvi a, 78
stax b
inx b
mvi a, 63
stax b
mvi a, 99
ldax b
out fc
dcx b
ldax b
out fe
hlt

ORG 600
LOOP6:
in f0
out fc
mov b, a
ani 0f
mov c, a
mov a, b
ani f0
ral
ral
ral
ral
add c
out fe
jmp LOOP6

ORG 700
mvi a, 0
mvi b, 0
LOOP7:
out fc
jnk LOOP7
inr a
SLEEP7:
inr b
jnz SLEEP7
jk SLEEP7
jmp LOOP7

ORG F00
mvi b, 10
mvi c, 00
mvi a, 00
out fc
LDH:
JK LDH
mov a, l
out fb  ; 11111011  clear point of low led
in f0  ; read
JNK HNK  ; if key pressed
mov e, a  ; backup a
ani f0  ; get key code
cmi 30  ; if press next button
jz LDL  ; load low 4 bits
cmi 70  ; if press store button
jz STD  ; store code to memory
cmi b0  ; if press over button
jZ OVER ; over input and run code
mov a, e ; restore a
HNK: ; not button pressed
ani 0f ; get switch code
ori 10 ; set digit point
out fa ; 11111010 display high 4 bits
ani 0f ; clear digit point
mov h, a ; store high 4 bits in register
jmp LDH ; loop
LDL:
JK LDL
mov a, h
out fa ; 11111010  clear point of high led
in f0
JNK LNK ; same as LDH
mov e, a
ani f0
cmi 30
jZ LDH
cmi 70
jz STD
cmi b0
jZ OVER
mov a, e
LNK:
ani 0f
ori 10
out fb
ani 0f
mov l, a
jmp LDL
STD:
jk STD
mov a, h
ral  ; rotate 4 times for insure h in high 4 bits;
ral
ral
ral
ora l  ;merge with low 4 bits
stax b ; store to memory
inx b  ; increse address pointer
mov a, c ; show address
out fc
jmp LDH
OVER:
JMP SELFCODE

ORG 1000
SELFCODE:
